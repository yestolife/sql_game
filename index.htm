<!DOCTYPE html>
<!--STATUS OK-->
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <script type="text/javascript" async="" src="baidubaike/auto_dup"></script>
    <script async="" src="baidubaike/element.js"></script>
    <script async="" src="baidubaike/monkey.js"></script>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=Edge">
<meta name="referrer" content="always">
<meta name="description" content="SQL谋杀案">
<title>SQL谋杀案</title>
<meta name="keywords" content="SQL谋杀案">

<meta name="csrf-token" content="">
<meta itemprop="dateUpdate" content="2020-03-05 20:51:47">

<link rel="stylesheet" href="css/codemirror.css">
  <link rel="stylesheet" href="css/main.css" />
  <link rel="stylesheet" href="css/neat.css" />

<script src="scripts/custom-elements.min.js"></script>
<script src="scripts/codemirror.js"></script>
<script src="scripts/codemirrorsql.js"></script>
<script src="scripts/autorefresh.js"></script>
<script src="scripts/main.js"></script>
<script>
window.onload = () => loadData('sql-murder-mystery.db');
</script>
<!--[if lte IE 9]>
<script>
    (function() {
      var e = "abbr,article,aside,audio,canvas,datalist,details,dialog,eventsource,figure,footer,header,hgroup,mark,menu,meter,nav,output,progress,section,time,video".split(","),
        i = e.length;
      while (i--) {
        document.createElement(e[i]);
      }

      window.console = window.console || {};
      var f = ['log', 'info', 'warning', 'error', 'clear'];
      var l = f.length;
      while(l--) {
        window.console[f[l]] = function () {};
      }
    })();
  </script>
<![endif]-->
<link rel="stylesheet" type="text/css" href="baidubaike/wiki-lemma_0d0a0e0.css">
    <link rel="stylesheet" type="text/css" href="baidubaike/wiki-common-base_9a9fb54.css">
    <link rel="stylesheet" type="text/css" href="baidubaike/userbar-n_2890903.css">
    <link rel="stylesheet" type="text/css" href="baidubaike/larkplayer_ee067eb.css">
    <link rel="stylesheet" type="text/css" href="baidubaike/webuploader_08d9db4.css">
    <link rel="stylesheet" type="text/css" href="baidubaike/wiki-lemma-module_7569fa2.css">
    <link rel="stylesheet" type="text/css" href="baidubaike/announcement_cba33f4.css">
    <link rel="stylesheet" type="text/css" href="baidubaike/label_1b0bc0e.css">
    <link rel="stylesheet" type="text/css" href="baidubaike/sideShare_9c411cd.css">
    <link rel="stylesheet" type="text/css" href="baidubaike/pageMask_ff9a193.css">
    <link rel="stylesheet" type="text/css" href="baidubaike/hotspotmining_2780e77.css">
    <link rel="stylesheet" type="text/css" href="baidubaike/mainContent_98e3702.css">
    <link rel="stylesheet" type="text/css" href="baidubaike/lemmaRelation_496a30a.css">
    <link rel="stylesheet" type="text/css" href="baidubaike/sideAuth_c13d91a.css">
    <link rel="stylesheet" type="text/css" href="baidubaike/searchHeader-n_f9a6e5b.css">
<script type="text/javascript">
    alog('speed.set', 'ht', +new Date);
</script><script>
        var _hmt = _hmt || [];
        (function() {
            var hm = document.createElement("script");
            hm.src = "https://hm.baidu.com/hm.js?55b574651fcae74b0a9f1cf9c8d7c93a";
            var s = document.getElementsByTagName("script")[0];
            s.parentNode.insertBefore(hm, s);
        })();
    </script><script type="text/javascript" src="%E8%8D%B7%E8%8A%B1%EF%BC%88%E8%8E%B2%E7%A7%91%E6%A4%8D%E7%89%A9%EF%BC%89_%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91_files/wiki-lemma-module-lemmaRelation_853c311.js"></script><script type="text/javascript" src="%E8%8D%B7%E8%8A%B1%EF%BC%88%E8%8E%B2%E7%A7%91%E6%A4%8D%E7%89%A9%EF%BC%89_%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91_files/lemmaReferenceTip_e7172a1.js"></script><link rel="stylesheet" href="%E8%8D%B7%E8%8A%B1%EF%BC%88%E8%8E%B2%E7%A7%91%E6%A4%8D%E7%89%A9%EF%BC%89_%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91_files/share_style0_16.css"></head>




<body class="wiki-lemma normal"><div id="BAIDU_DUP_fp_wrapper" style="position: absolute; left: -1px; bottom: -1px; z-index: 0; width: 0px; height: 0px; overflow: hidden; visibility: hidden; display: none;"><iframe id="BAIDU_DUP_fp_iframe" src="%E8%8D%B7%E8%8A%B1%EF%BC%88%E8%8E%B2%E7%A7%91%E6%A4%8D%E7%89%A9%EF%BC%89_%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91_files/o.htm" style="width: 0px; height: 0px; visibility: hidden; display: none;"></iframe></div>


<div class="header-wrapper pc-header-new">


</div>

<dl class="body-wrapper">

<div class="content-wrapper">
<div class="content">
<div class="personal-content">
</div>
<div class="main-content">

<div style="width:0;height:0;clear:both"></div><dl class="lemmaWgt-lemmaTitle lemmaWgt-lemmaTitle-">
<dd class="lemmaWgt-lemmaTitle-title">

<div id="fmp_flash_div" style="position:absolute; left:-9999px;">
<audio id="audio" src=""></audio>
</div>
<h1>SQL谋杀案</h1>
<h2>（Let's go）</h2>

</dd>
</dl>
<div class="promotion-declaration">
</div><div class="lemma-summary" label-module="lemmaSummary">
<div class="para" label-module="para">SQL市发生一起谋杀事件！这是一个好玩的破案游戏，让你自我驱动地学习SQL概念和命令。 </div>
</div>

<div class="lemmaWgt-lemmaCatalog">
<div class="lemma-catalog">
<h2 class="block-title">目录</h2>
<div class="catalog-list column-4">
<ol>
<li class="level1">
<span class="index">1</span>
<span class="text"><a href="#1">SQL初学者漫游</a></span>
</li>
<li class="level1">
<span class="index">2</span>
<span class="text"><a href="#2">一些概念定义</a></span>
</li>
<li class="level2">
<span class="index">▪</span>
<span class="text"><a href="#2_1">什么是SQL</a></span>
</li>
<li class="level2">
<span class="index">▪</span>
<span class="text"><a href="#2_2">慢着，什么是关系型数据库</a></span>
</li>
<li class="level2">
<span class="index">▪</span>
<span class="text"><a href="#2_3">什么是ERD</a></span>
</li>
</ol>
<ol>
<li class="level1">
<span class="index">3</span>
<span class="text"><a href="#3">什么是查询呢 </a></span>
</li>
<li class="level2">
<span class="index">▪</span>
<span class="text"><a href="#3_1">试试简单的查询</a></span>
</li>
<li class="level2">
<span class="index">▪</span>
<span class="text"><a href="#3_2">SQL查询语句中有哪些元素呢?</a></span>
</li>
<li class="level2">
<span class="index">▪</span>
<span class="text"><a href="#3_3">通配符和匹配函数</a></span>
</li>
<li class="level1">
<span class="index">4</span>
<span class="text"><a href="#4">深水区</a></span>
</li>
</ol>
<ol>
<li class="level1">
<span class="index">5</span>
<span class="text"><a href="#5">把表格连接起来</a></span>
</li>
<li class="level2">
<span class="index">▪</span>
<span class="text"><a href="#5_1">抓住凶手</a></span>
</li>
<li class="level2">
<span class="index">▪</span>
<span class="text"><a href="#5_2">检验结果</a></span>
</li>
</ol>

</div>
</div>
</div>
<div class="anchor-list ">
<a name="1" class="lemma-anchor para-title"></a>
<a name="sub15191795_1" class="lemma-anchor "></a>
<a name="SQL初学者漫游" class="lemma-anchor "></a>
</div>
<div class="para-title level-2" label-module="para-title">
<h2 class="title-text">SQL初学者漫游</h2>
</div>

<div class="para" label-module="para">
<p>
          我们将介绍有关SQL的基本概念，但足以让你追查凶手。如果你想学习完整的SQL，去<a href="https://selectstarsql.com/">Select
            Star SQL</a>看看。这起谋杀案已经发生，大侦探需要你的帮忙。大侦探给了你一份犯罪情况报告，但你不小心搞丢了。你模糊地记得这是一起<strong>谋杀案（murder）</strong>
		  ，发生时间在​<strong>2018年1月15日​</strong>，地点在​<strong>SQL市​</strong>。从警察局数据库开始回忆那份你弄丢的犯罪情况报告吧。
        </p>
        <p>
          所有案件的线索都在一个庞大的数据库里，你需要利用SQL工具在茫茫的信息海洋中打捞关键线索。第一步，从警局的数据库里检索一遍犯罪情况报告相关资料。后面我们会介绍你需要知道的高级命令，你可以在任何代码框中输入SQL语句以实现的你的检索查找。
        </p>
</div>

<div class="anchor-list ">
<a name="2" class="lemma-anchor para-title"></a>
<a name="sub15191795_2" class="lemma-anchor "></a>
<a name="一些概念定义" class="lemma-anchor "></a>
</div>
<div class="para-title level-2" label-module="para-title">
<h2 class="title-text">一些概念定义</h2>
</div>

<div class="anchor-list ">
<a name="2_1" class="lemma-anchor para-title"></a>
<a name="sub15191795_2_1" class="lemma-anchor "></a>
<a name="什么是SQL" class="lemma-anchor "></a>
</div>
<div class="para-title level-3" label-module="para-title">
<h2 class="title-text">1.什么是SQL</h2>
</div>
<div class="para" label-module="para">
<p>
          SQL是结构化查询语言（Structured Query Language）的简称，是一种和关系型数据库交互的方式，方便人们检索特定有意义的信息。
        </p>

</div>
<div class="anchor-list ">
<a name="2_2" class="lemma-anchor para-title"></a>
<a name="sub15191795_2_2" class="lemma-anchor "></a>
<a name="慢着，什么是关系型数据库" class="lemma-anchor "></a>
</div>
<div class="para-title level-3" label-module="para-title">
<h2 class="title-text">2.慢着，什么是关系型数据库</h2>
</div>
<div class="para" label-module="para">
<p>一般来说，数据库是管理信息的系统。数据库可以有很多种形式存储数据。数据的结构性越强，就越能帮助人和计算机高效处理数据。</p>
        <p>关系型数据库是最常见的一种数据库，它的核心是<strong>表</strong>，有点像Excel中的表格。表中的每一列有名字和数据类型（如字符、数字等等）
		，每一行是具体的实例。“关系”的意思是指不同表之间数据是如何连接的特定规则。
        </p>
</div>
<div class="anchor-list ">
<a name="2_3" class="lemma-anchor para-title"></a>
<a name="sub15191795_2_3" class="lemma-anchor "></a>
<a name="什么是ERD" class="lemma-anchor "></a>
</div>
<div class="para-title level-3" label-module="para-title">
<h2 class="title-text">3.什么是ERD</h2>
</div>
<div class="para" label-module="para">
<p>
          ERD是实体关系图（Entity Relationship Diagram）的简称，是数据库中各个表关联关系的可视化展现。下面有SQL谋杀案相关数据库的ERD。
		  图中每个表包含名字（上方），列名称的清单（左侧），相关数据类型（右侧，大写）。图中还有一些金钥匙图标，蓝色箭头和灰色箭头。金钥匙表示该列是表的主键，蓝色箭头表示该列是表的外键。如果两张表有关联，由灰色箭头连接表之间匹配的列。<strong>主键​</strong>:表中每行唯一的标识。
		  <strong>外键</strong>​:用于一张表与另一张表关联数据。这是我们数据库的ERD(线索就在里面，仔细观察，熟悉这幅图）:
        </p>
    <img src="img/schema.png" width="90%">
</div>

<div class="anchor-list ">
<a name="3" class="lemma-anchor para-title"></a>
<a name="sub15191795_3" class="lemma-anchor "></a>
<a name="什么是查询呢" class="lemma-anchor "></a>
</div>
<div class="para-title level-2" label-module="para-title">
<h2 class="title-text">什么是查询呢</h2>
</div>

<div class="anchor-list ">
<a name="3_1" class="lemma-anchor para-title"></a>
<a name="sub15191795_3_1" class="lemma-anchor "></a>
<a name="试试简单的查询" class="lemma-anchor "></a>
</div>
<div class="para-title level-3" label-module="para-title">
<h2 class="title-text">1.试试简单的查询</h2>
</div>
<div class="para" label-module="para">
    <div class="grid">
      <div class="grid-item">
<p>如果你看一看数据库中的数据，你会发现表格太大了！数据太多了，几乎不可能一行一行看过去查到想要的信息。那咋整呢？</p>
        <p>
          查询就在这里派上用场了。查询是我们用于获取数据库中数据而构造的语句。查询语句读起来像英语。我们来试试一些数据库查询，在下面任何代码框中，点击run可以执行查询语句，第一次执行需要加载数据，耐心等待一会。（注意，SQL命令是大小写不敏感的，但为了便于阅读，一般大写。还可以使用换行或者空格调整命令格式，以便阅读。大多数数据库系统需要命令以';'结尾，但在这个web页面中不需要。）
        </p>
        <sql-exercise data-question="数据库中有多少人的信息呢?"
          data-comment="不必在意具体的含义, 但你要知道，可以改变'person'为其他ERD中的表名，以探索其他表格有多少行。试试吧。"
          data-default-text="SELECT count(*)
FROM person;"></sql-exercise>


        <sql-exercise data-question="这些人有哪些信息呢?"
          data-comment="如果想知道表中有多少行，可以在'SELECT'后面跟着'*'。前面说过，表里的数据很多，与其全看，不如只看前10行。试试看修改一下表名或限制数目。"
          data-default-text="SELECT * FROM person LIMIT 10;"></sql-exercise>


        <sql-exercise data-question="一列中有哪些数据呢?"
          data-comment='处理数据时，总是想先找找数据库结构（如ERD图）和有效值，可是经常得不到。我们可以使用DISTINCT关键字快速查看数据库中有什么值。
		  运行下面语句后，删除DISTINCT关键字跑一跑，看看有什么区别。（点击reset按钮可以清除结果）'
          data-default-text="SELECT DISTINCT type FROM crime_scene_report;"></sql-exercise>
</div></div>
</div>

<div class="anchor-list ">
<a name="3_2" class="lemma-anchor para-title"></a>
<a name="sub15191795_3_2" class="lemma-anchor "></a>
<a name="SQL查询语句中有哪些元素呢?" class="lemma-anchor "></a>
</div>
<div class="para-title level-3" label-module="para-title">
<h2 class="title-text">2.SQL查询语句中有哪些元素呢?</h2>
</div>
<div class="para" label-module="para">
    <div class="grid">
      <div class="grid-item">
<p>一条查询语句包含:SQL关键字 (比如上面的 ​'SELECT'​ 和 ​'FROM​' )，列名 (比如上面的列名type)，表名 (比如上面的表名person)，通配符 (比如 ​<code>%</code>)，函数，筛选条件和其他。
        </p>
        <h4>SQL关键字</h4>
        <p>
          SQL关键字是用于指定查询的操作。SQL关键字是大小写不敏感的，但建议使用大写，以便和其他部分区分开。一些常用的关键字有：
        </p>
		<h5>SELECT</h5>
        <p>SELECT​ 用于抓取数据库中指定列的数据:</p>
        <ul>
          <li>
            *​ (星号): 跟在SELECT后面表示抓取表中全部列;
          </li>
          <li>
            列名: 选择指定列，将列名放在SELECT后，用逗号分隔各列名。
          </li>
        </ul>

        <h5>FROM</h5>
        <p>FROM​ 指定表; 通过表名加逗号分隔，可以指定多个表。（后面还会学JOIN关键字，你就能找到感觉了）</p>

        <h5>WHERE</h5>
        <p>​WHERE​ 语句在查询中用于指定条件筛选结果。</p>
        <p>动动手喽！</p>
        <sql-exercise
          data-question="这是一个简单的例子，获取某个人的所有信息。（别担心，数据都是造出来的）"
          data-comment="注意，需要使用单引号''包住名字，可以试试其他名字'Yessenia Fossen','Ted Denfip' , 'Davina Gangwer'。"
          data-default-text="SELECT * FROM person WHERE name = 'Kinsey Erickson'"></sql-exercise>

        <p>AND关键字用于多重条件筛选，必须每个条件都满足才会被筛选出来。（OR关键字用于筛选满足任一条件的结果行）</p>

        <sql-exercise id='clue1' data-question="这条查询需要得到指定犯罪类型和指定城市的数据。"
          data-comment=" 注意，当指定的是文本值，需要在数据库中有匹配的值。可以试试将'Chicago' 改为 'chicago' 运行. 然后看看，你是不是能找到<strong>第一条线索</strong>。"
          data-default-text="SELECT * FROM crime_scene_report
WHERE type = 'theft'
AND city = 'Chicago';" data-solution="SELECT * FROM crime_scene_report
WHERE type = 'murder'
AND city = 'SQL City';"></sql-exercise>

        <p>如果你没找到正确的犯罪情况报告，点击show solution按钮，替换为提示的代码。(忽略前面的 <code>/*</code>) 如果你找到了一条犯罪情况报告，而不是多条相同城市相同犯罪类型的，那么恭喜你，找到了<strong>一条关键信息</strong>(你最好是把线索记下来，后面回用到的)。
        </p>
</div></div>
</div>

<div class="anchor-list ">
<a name="3_3" class="lemma-anchor para-title"></a>
<a name="sub15191795_3_3" class="lemma-anchor "></a>
<a name="通配符和匹配函数?" class="lemma-anchor "></a>
</div>
<div class="para-title level-3" label-module="para-title">
<h2 class="title-text">3.通配符和匹配函数</h2>
</div>
<div class="para" label-module="para">
    <div class="grid">
      <div class="grid-item">
 <p>经常你只是知道关键信息的一部分，SQL也能利用好。用特定符号表示未知字符，就是通配符。SQL支持两种通配符。最常用的是<code>%</code>通配符。</p>
        <p>写一个 <code>%</code> 通配符在一条查询语句中，SQL系统会返回匹配其他字符的结果，在通配符的位置可以是任何字符串。例如，
          <code>'Ca%a'</code> 可以匹配 <code>Canada</code> 和 <code>California</code>.</p>
        <p>另外，还有个不常用的通配符<code>_</code>。它表示匹配其他字符，在<code>_</code>的位置只有一个任意字符。例如<code>'B_b'</code> 会匹配 <code>'Bob'</code> 和 <code>'Bub'</code> 但不匹配<code>'Babe'</code> 或
          <code>'Bb'</code>.</p>
        <p><strong>注意:</strong> 使用通配符时，不能用 <code>=</code> 号; 而是用<code>LIKE</code>.
        </p>

        <sql-exercise data-question="试一下通配符"
          data-comment="运行这个命令，使用各种变体如'Irvin_' 和 'I%e'"
          data-default-text="SELECT DISTINCT city
FROM crime_scene_report
WHERE city LIKE 'I%';"></sql-exercise>

        <p>SQL还支持数值比较<code>&lt;</code> (小于) and <code>&gt;</code> (大于). 也可以使用关键字 <code>BETWEEN</code> 和 <code>AND</code> 字符和数字都可以比较。
        </p>


        <sql-exercise data-question="试试比较符T。" data-comment="" data-default-text="SELECT DISTINCT city
FROM crime_scene_report
WHERE city BETWEEN 'W%' AND 'Z%';"></sql-exercise>

        <p>已经提到了SQL命令大小写不敏感，但是 <code>WHERE</code>查询使用<code>=</code> 和 <code>LIKE</code> 的条件对大小写敏感. 可是有时你不知道数据库中的文本是怎样的，还好SQL提供了两个函数帮你。他们是 <code>UPPER()</code> 和<code>LOWER()</code>，你可以发现他们是干嘛的，在下面代码框里探索一番吧。</p>

        <sql-exercise data-question="试试 UPPER() 和 LOWER()." data-comment="" data-default-text="SELECT DISTINCT city
FROM crime_scene_report
WHERE LOWER(city) ='sql city';"></sql-exercise>
</div></div>
</div>

<div class="anchor-list ">
<a name="4" class="lemma-anchor para-title"></a>
<a name="sub15191795_4" class="lemma-anchor "></a>
<a name="深水区" class="lemma-anchor "></a>
</div>
<div class="para-title level-2" label-module="para-title">
<h2 class="title-text">深水区</h2>
</div>

<div class="para" label-module="para">

<div class="grid">
      <div class="grid-item">
<h3>SQL聚合函数</h3>
        <p>
          有时候你的问题可能不是简单地查找某行符合条件的数据。你很可能想知道更复杂的问题，比如谁年龄最大，谁最矮之类的。<strong>聚合函数</strong>可以帮助解决这些问题。实际上你前面已经学了一个聚合函数<code>COUNT</code>。有驾照的人中年龄最大的有多大？在数据量不大的时候，你可以直接用肉眼去看，但<code>drivers_license</code>表中有成千上万条记录。（试试<code>COUNT</code>，你就知道有多少了！）你不可能靠看数据而找到答案。
        </p>
        <p>SQL提供了一些有用的聚合函数: MAX：查找最大值；MIN：查找最小值；SUM：计算某列的和；AVG：计算某列的平均值；COUNT​：某列值的计数。
        </p>
        <sql-exercise data-question="运行查询语句，试试其他聚合函数。" data-comment=""
          data-default-text="SELECT max(age) FROM drivers_license;"></sql-exercise>

        <p>还有另外一种查找最大最小值的办法，同时可以看到更多的数据，就是通过排序。在列名后使用<code>ORDER BY</code>很简单地排序。当数据量很大时，排序是个很大的挑战（当大家使用SQL工作时，请使用更好的数据库工具，别用这种基于web版的）。默认条件下，ORDER BY 是升序的，你也可以通过<code>ASC</code>指定升序，或者<code>DESC</code>指定降序。
        </p>
        <sql-exercise data-question="执行查询语句，看看如何控制排序。"
          data-comment="执行后，改变ASC为DESC，看看结果有什么不同。也可以试试在其他列排序。"
          data-default-text="SELECT * FROM drivers_license ORDER BY age ASC LIMIT 10"></sql-exercise>

        <p id='clue2'>目前你已经具备了足够的SQL知识来找到两个目击者，试试吧！还记得<a href="#clue1">第一条线索</a>吗？</p>
        <sql-exercise data-question="写一条查询语句找到第一个目击者"
          data-comment="有很多中方式去做，即使显示“Incorrect”，你也可能得到答案。"
          data-default-text="


" data-solution="SELECT * FROM person
WHERE address_street_name = 'Northwestern Dr'
ORDER BY address_number DESC LIMIT 1;"></sql-exercise>

        <sql-exercise data-question="写一条查询语句找到第二个目击者"
          data-comment="有很多中方式去做，即使显示“Incorrect”，你也可能得到答案。"
          data-default-text="

" data-solution="SELECT * FROM person
WHERE name like '%Annabel%'
AND address_street_name = 'Franklin Ave';"></sql-exercise>

    </div></div>
</div>

<div class="anchor-list ">
<a name="5" class="lemma-anchor para-title"></a>
<a name="sub15191795_5" class="lemma-anchor "></a>
<a name="把表格连接起来" class="lemma-anchor "></a>
</div>
<div class="para-title level-2" label-module="para-title">
<h2 class="title-text">把表格连接起来</h2>
</div>

<div class="para" label-module="para">
<div class="anchor-list ">
<a name="5_1" class="lemma-anchor para-title"></a>
<a name="sub15191795_5_1" class="lemma-anchor "></a>
<a name="抓住凶手" class="lemma-anchor "></a>
</div>
<div class="para-title level-3" label-module="para-title">
<h2 class="title-text">1.抓住凶手</h2>
</div>
<div class="para" label-module="para">
<div class="grid">
      <div class="grid-item">
<p>到目前，我们已经能够从单一表中查找数据。但如果我们需要遇到复杂问题怎么办，比如从两个不同的表取数。JOIN登场了。</p>

        <p> SQL老手会使用好几种JOIN，你可能听说过内连接，外连接，左连接，右连接。这里我们只讨论最常见的内连接。由于内连接太常见了，SQL中可以忽略INNER关键字。</p>

        <p>
          最常见的连接表的方式是使用主键和外键。参考前面的ERD图，看看键在表格之间的关系。可以连接任意列，但是作为键值的列可以提高效率。最简单展示连接操作是如何工作的就是写出来。
        </p>

        <sql-exercise
          data-question="运行这条查询语句，得到数据库中年度最有钱人。（再强调下哈，数据是造出来的）"
          data-comment="试试编辑这条语句返回更多值，试试连接其他表。试试用*在SELECT和FROM之间。Try joining other tables together. You can use * in between SELECT and FROM here like with any other query, so try that too."
          data-default-text="SELECT person.name, income.annual_income
FROM income
JOIN person
  ON income.ssn = person.ssn
WHERE annual_income > 450000"></sql-exercise>

        <p>有时候你想连接不止一张表。SQL可以在一条查询中连接很多表。
        </p>

        <sql-exercise data-question="我们来看看富人们有什么其他共同特点。"
          data-comment="这个例子展示了如何连接多张表。同时顺便展示一下如何给表格起别名，有了别名，这样你就不用每次输入长长的表名。最后，还展示了如何修改最后展示结果的列名。"
          data-default-text="SELECT name, annual_income as income,
gender, eye_color as eyes, hair_color as hair
FROM income i
JOIN person p
  ON i.ssn = p.ssn
JOIN drivers_license dl
  ON p.license_id = dl.id
WHERE annual_income > 450000"></sql-exercise>


        <p>现在你已经知道如何连接表了，你可以找到之前查到的两个目击者的询问记录。试试吧！（还记得前面找到的<a href='#clue2'>线索</a>吗，另外多看看ERD图很有帮助）</p>
        <sql-exercise data-question="写一条查询展示两个目击者的询问记录"
          data-comment="有很多中方式去做，及时显示“Incorrect”，你也可能得到答案。官方答案是使用一条查询语句，但你不必一致。你甚至可以不使用JOIN关联表，试试吧。"
          data-default-text="" data-solution="SELECT person.name, interview.transcript
FROM person JOIN interview
ON person.id = interview.person_id
WHERE person.id = 14887 OR person.id = 16371;"></sql-exercise>

    </div></div>

    <img src="img/schema.png" width='90%' >
    </div>

    <div id="go-get-em" class="grid">
      <div class="grid-item">
        <h3>抓住凶手!</h3>
        <p>
          目前为止，你已经有了足够的SQL知识去追查凶手。你可能要仔细看看ERD，做一些合理的假设。
        </p>
        <sql-exercise data-question="找出凶手!"
          data-comment="找到凶手可能不止一条查询，但你可以一直编辑代码框，同时记录下你查的结果，当你找到了答案，去下面验证。"
          data-default-text="


"></sql-exercise>

      </div>
    </div>
<div class="para" label-module="para">
<div class="anchor-list ">
<a name="5_2" class="lemma-anchor para-title"></a>
<a name="sub15191795_5_2" class="lemma-anchor "></a>
<a name="检验结果" class="lemma-anchor "></a>
</div>
<div class="para-title level-3" label-module="para-title">
<h2 class="title-text">2.检验结果</h2>
</div>
    <div class="grid">
      <div class="grid-item">
        <h3>检验结果</h3>
        <sql-exercise data-question="找到凶手了吗？" data-comment="" data-default-text="INSERT INTO solution VALUES (1, '在这里替换为凶手的名字');

SELECT value FROM solution;"></sql-exercise>

      </div>
    </div>

    </div>
</div>


</div>
    <div class="side-content">
<div class="side-catalog" style="visibility: visible; bottom: 50px; top: auto;">
<div class="side-bar">
<em class="circle start"></em>
<em class="circle end"></em>
</div>
<div class="catalog-scroller">
<dl class="catalog-list">
<dt class="catalog-title level1">
<em class="pointer"></em>
<a href="#1" class="title-link">
<span class="text">
<span class="title-index">1</span>
<span class="title-link" nslog-type="10002802">SQL初学者漫步</span>
</span>
</a>
</dt>
<dt class="catalog-title level1">
<em class="pointer"></em>
<a href="#2" class="title-link">
<span class="text">
<span class="title-index">2</span>
<span class="title-link" nslog-type="10002802">一些概念定义</span>
</span>
</a>
</dt>
<dt class="catalog-title level1">
<em class="pointer"></em>
<a href="#3" class="title-link">
<span class="text">
<span class="title-index">3</span>
<span class="title-link" nslog-type="10002802">什么是查询</span>
</span>
</a>
</dt>
<dt class="catalog-title level1">
<em class="pointer"></em>
<a href="#4" class="title-link">
<span class="text">
<span class="title-index">4</span>
<span class="title-link" nslog-type="10002802">深水区</span>
</span>
</a>
</dt>
<dt class="catalog-title level1">
<em class="pointer"></em>
<a href="#5" class="title-link">
<span class="text">
<span class="title-index">5</span>
<span class="title-link" nslog-type="10002802">把表格连起来</span>
</span>
</a>
</dt>
<a class="arrow" href="javascript:void(0);" style="top: 300px;"></a>
</dl>
</div>
<div class="right-wrap" style="display: none;">
<a class="go-up" href="javascript:void(0);"></a>
<a class="go-down" href="javascript:void(0);"></a>
</div>
</div></div>

</div>
    <dl class="lemma-reference collapse nslog-area log-set-param" data-nslog-type="2" log-set-param="ext_reference">
<div class="fc-guess-like new" id="fc_guess_like_new" style="display: block;">
<div class="open-tag-title">
    <dd class="reference-list-wrap">
    <ul class="reference-list">
<li class="reference-item " id="reference-[1]-107057-wrap">
<span class="site">1.西北大学英文原版地址:</span>
 <a href="https://mystery.knightlab.com/walkthrough.html">https://mystery.knightlab.com/walkthrough.html</a>
</li>
<li class="reference-item " id="reference-[2]-107057-wrap">
<span class="site">2.本站源代码:</span>
 <a href="https://github.com/yestolife/sql_game">https://github.com/yestolife/sql_game</a>
</li>
<li class="reference-item " id="reference-[3]-107057-wrap">
<span class="site">3.作者CSDN博客:</span>
 <a href="https://blog.csdn.net/Andytl">https://blog.csdn.net/Andytl</a>
</li>
        </ul>
    </dd>
</div>
</div>
</dl>
</div>
</div>


<script>
      window['__abbaidu_2020_subidgetf'] = function () {
          var subid = 01000000;
          return subid;
      };
    </script>
<script async="" src="baidubaike/abclite-2020-s.js"></script>

<script type="text/javascript" src="baidubaike/mod_4302fe0.js"></script>
<script type="text/javascript">require.resourceMap({"res":{"wiki-lemma:widget/lemma_content/mainContent/lemmaRelation/lemmaInsert.js":{"url":"https://bkssl.bdimg.com/static/wiki-lemma/widget/lemma_content/mainContent/lemmaRelation/lemmaInsert_18f1b51.js","pkg":"wiki-lemma:p5","deps":["wiki-common:widget/component/nslog/nslog.js"]},"wiki-lemma:widget/lemma_content/mainContent/lemmaRelation/tangram.js":{"url":"https://bkssl.bdimg.com/static/wiki-lemma/widget/lemma_content/mainContent/lemmaRelation/tangram_459492a.js","pkg":"wiki-lemma:p5"},"wiki-lemma:widget/lemma_content/mainContent/lemmaReference/lemmaReferenceTip/lemmaReferenceTip.js":{"url":"https://bkssl.bdimg.com/static/wiki-lemma/widget/lemma_content/mainContent/lemmaReference/lemmaReferenceTip/lemmaReferenceTip_e7172a1.js","deps":["wiki-common:widget/lib/jquery/jquery.js","wiki-common:widget/lib/jsmart/jsmart.js","wiki-common:widget/component/nslog/nslog.js"]}},"pkg":{"wiki-lemma:p5":{"url":"https://bkssl.bdimg.com/static/wiki-lemma/pkg/wiki-lemma-module-lemmaRelation_853c311.js"}}});</script><script type="text/javascript" src="%E8%8D%B7%E8%8A%B1%EF%BC%88%E8%8E%B2%E7%A7%91%E6%A4%8D%E7%89%A9%EF%BC%89_%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91_files/wiki-common-base_35af241.js"></script>
<script type="text/javascript" src="baidubaike/wiki-lemma_069d265.js"></script>
<script type="text/javascript" src="baidubaike/hotspotmining_419cada.js"></script>
<script type="text/javascript" src="baidubaike/zhixin_ea4d2ff.js"></script>
<div class="wgt_overlay" style="opacity: 0; position: fixed;"></div>
<script type="text/javascript">
  var Hunter = window.Hunter || {};
  Hunter.userConfig = Hunter.userConfig || [];
  </script>

</div>
    </li><em class="tail"></em></div></dl></body></html>